# vim:fileencoding=utf-8:ft=conf

# https://sw.kovidgoyal.net/kitty/conf/
# https://sw.kovidgoyal.net/kitty/actions/#action-edit_config_file
#
# Reload config: ctrl+super+,

# Allow "kitten @ foo" commands to work.
#
# Not needed, use printf to set the title:
#   printf "\033]0;xxx\007"
#
allow_remote_control no

# On macOS kitty uses a non-interactive? shell which does not source .profile nor .bashrc.
shell /usr/bin/env bash -l
shell_integration no-cursor

# Fix/augment $PATH.
# Kitty always uses a "login shell" thus we need to append our extras here.
# This especially matters for LAUNCH ACTIONS (`kitty/launch-actions.conf`).
# exe_search_path +$HOME/bin
# exe_search_path +/usr/local/bin
env PATH=${PATH}:$HOME/bin:/usr/local/bin

# Hide the kitty window's title bar on macOS.
hide_window_decorations yes

# Font family. You can also specify different fonts for the
# bold/italic/bold-italic variants. By default they are derived automatically,
# by the OSes font system. Setting them manually is useful for font families
# that have many weight variants like Book, Medium, Thick, etc. For example:
# font_family Operator Mono Book
# bold_font Operator Mono Thick
# bold_italic_font Operator Mono Medium
# or
# font_family SF Mono Medium
# bold_font        SF Mono Semibold
# bold_italic_font SF Mono Semibold 
# Note that you should use the full family name but do not add Bold or Italic qualifiers
# to the name.
font_family      Menlo Regular
italic_font      Menlo Italic
bold_font        Menlo Bold
bold_italic_font Menlo Bold Italic

# Font size (in pts)
font_size        14.0


# Adjust the line height. 
# You can use either numbers, which are interpreted as pixels or percentages
# (number followed by %), which are interpreted as percentages of the
# unmodified line height. You can use negative pixels or percentages less than
# 100% to reduce line height (but this might cause rendering artifacts).
adjust_line_height 0

# The foreground color
foreground       #dddddd

# The background color
background       #000000

# The foreground for selections
selection_foreground #000000

# The background for selections
selection_background #FFFACD

# The color for highlighting URLs on mouse-over
url_color #0087BD

# Cursor color. none="reverse video"
cursor                  green
cursor_shape            block
cursor_shape_unfocused  hollow
# Blink interval (seconds). Zero=none.
cursor_blink_interval     0
# Stop blinking after the many seconds of keyboard inactivity.
cursor_stop_blinking_after 15.0

# Number of lines of history to keep in memory for scrolling back
scrollback_lines 2000

# Use Nvim to view kitty scrollback.
scrollback_pager nvim --cmd 'set eventignore=FileType' +'nnoremap q ZQ' +'call nvim_open_term(0, {})' +'set nomodified nolist' +'$' -

# Wheel scroll multiplier (modify the amount scrolled by the mouse wheel). Use negative
# numbers to change scroll direction.
wheel_scroll_multiplier 5.0

# The interval between successive clicks to detect double/triple clicks (in seconds)
click_interval 0.5

# Characters considered part of a word when double clicking. In addition to these characters
# any character that is marked as an alpha-numeric character in the unicode
# database will be matched.
select_by_word_characters :@-./_~?&=%+#

# Hide mouse cursor after the specified number of seconds of the mouse not being used. Set to
# zero to disable mouse cursor hiding.
mouse_hide_wait 3.0

# Set the active window to the window under the mouse when moving the mouse around
focus_follows_mouse no

# The enabled window layouts. A comma separated list of layout names. The special value * means
# all layouts. The first listed layout will be used as the startup layout.
# For a list of available layouts, see the file layouts.py
enabled_layouts *

# If enabled, the window size will be remembered so that new instances of kitty will have the same
# size as the previous instance. If disabled, the window will initially have size configured
# by initial_window_width/height, in pixels.
remember_window_size   yes
initial_window_width   640
initial_window_height  400

# Delay (in milliseconds) between screen updates. Decreasing it, increases
# frames-per-second (FPS) at the cost of more CPU usage. The default value
# yields ~100 FPS which is more than sufficient for most uses.
repaint_delay    10

# Delay (in milliseconds) before input from the program running in the terminal
# is processed. Note that decreasing it will increase responsiveness, but also
# increase CPU usage and might cause flicker in full screen programs that
# redraw the entire screen on each loop, because kitty is so fast that partial
# screen updates will be drawn.
input_delay 3

# Visual bell duration. Flash the screen when a bell occurs for the specified number of
# seconds. Set to zero to disable.
visual_bell_duration 0.0

# Enable/disable the audio bell. Useful in environments that require silence.
enable_audio_bell yes

# The program with which to open URLs that are clicked on. The special value "default" means to
# use the operating system's default URL handler.
open_url_with default

# The value of the TERM environment variable to set
term xterm-kitty

# The width (in pts) of window borders. Will be rounded to the nearest number of pixels based on screen resolution.
# Note that borders are displayed only when more than one window is visible. They are meant to separate multiple windows.
window_border_width 1

# The window margin (in pts) (blank area outside the border)
window_margin_width 0

# The window padding (in pts) (blank area between the text and the window border)
window_padding_width 0

# The color for the border of the active window
active_border_color #00ff00

# The color for the border of inactive windows
inactive_border_color #cccccc

# The 16 terminal colors. There are 8 basic colors, each color has a dull and
# bright version.

# black
color0   #000000
color8   #4d4d4d

# red
color1   #cc0403
color9   #f2201f

# green
color2   #19cb00
color10  #23fd00

# yellow
color3   #cecb00
color11  #fffd00

# blue
color4  #0d73cc
color12 #1a8fff

# magenta
color5   #cb1ed1
color13  #fd28ff

# cyan
color6   #0dcdcd
color14  #14ffff

# white
color7   #dddddd
color15  #ffffff


# Key mapping
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html
# 
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.
# 
# You can combine multiple actions to be triggered by a single shortcut, using the
# syntax below:
# map key combine <separator> action1 <separator> action2 <separator> action3 ...
# For example:
# map ctrl+shift+e combine : new_window : next_layout
# this will create a new window and switch to the next available layout

# Clipboard
map ctrl+shift+v        paste_from_clipboard
map ctrl+shift+c        copy_to_clipboard

# Clipboard (macOS)
map super+v             paste_from_clipboard
map super+c             copy_to_clipboard

map shift+insert        paste_from_selection
# You can also pass the contents of the current selection to any program using
# pass_selection_to_program. By default, the system's open program is used, but
# you can specify your own, for example:
# map ctrl+shift+o      pass_selection_to_program firefox
# map ctrl+shift+o        pass_selection_to_program 

# Scrolling
map page_up             scroll_page_up
map page_down           scroll_page_down
map super+home          scroll_home
map super+end           scroll_end
map super+/             show_scrollback

# Window management
map super+n             new_window
map cmd+w               close_window_with_confirmation
map super+j             next_window
map super+k             previous_window
# map ctrl+shift+1        first_window
# map ctrl+shift+2        second_window
# map ctrl+shift+3        third_window
# map super+t           launch --type=tab
map super+shift+]       next_layout
map super+shift+[       last_used_layout
map super+shift+.       move_tab_forward
map super+shift+,       move_tab_backward
# "zoom". https://sw.kovidgoyal.net/kitty/conf/#layout-managemene
map super+z             toggle_layout stack
map super+left          resize_window narrower
map super+right         resize_window wider
map super+up            resize_window taller
map super+down          resize_window shorter
map super+shift+-       start_resizing_window
# reset all windows in the tab to default sizes
map super+shift+=       resize_window reset
# Return to last-used tab.
map ctrl+tab            goto_tab -1
map super+t             new_tab
# map super+`           next_tab
map super+]             next_tab
map super+[             previous_tab
map super+1             goto_tab 1
map super+2             goto_tab 2
map super+3             goto_tab 3
map super+4             goto_tab 4
map super+5             goto_tab 5
map super+6             goto_tab 6
map super+7             goto_tab 7
map super+8             goto_tab 8
map super+9             goto_tab 9

# Tabline/tabbar
active_tab_foreground   #000
active_tab_background   #eee
inactive_tab_foreground #444
inactive_tab_background #999
tab_bar_style           separator
# tab_separator           â”‚
tab_title_template      "{'Z' if layout_name == 'stack' else ''}{index}:{title[title.rfind('/')+1:]}"
active_tab_font_style   bold
inactive_tab_foreground #999999
inactive_tab_background black
map super+.             set_tab_title

# You can also open a new window running an arbitrary program, for example:
# map ctrl+shift+y      new_window mutt
# You can also pass the current selection to the new program by using the @selection placeholder
# map ctrl+shift+y      new_window less @selection
# Finally, you can even send the contents of the current screen + history buffer as stdin using
# the placeholders @text (which is the plain text) and @ansi (which includes text styling escape codes)
# For example, the following command opens the scrollback buffer in less in a new window.
# map ctrl+shift+y      new_window @ansi less +G -R




# Miscellaneous
map ctrl+shift+equal    increase_font_size
map ctrl+shift+minus    decrease_font_size
map ctrl+shift+backspace restore_font_size

# Sending arbitrary text on shortcut key presses
# You can tell kitty to send arbitrary (UTF-8) encoded text to
# the client program when pressing specified shortcut keys. For example:
# send_text all ctrl+alt+a Special text
# This will send "Special text" when you press the Ctrl+Alt+a key combination.
# The text to be sent is a python string literal so you can use escapes like
# \x1b to send control codes or \u21fb to send unicode characters (or you can
# just input the unicode characters directly as UTF-8 text). The first argument
# to send_text is the keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated combination of them.
# The special keyword all means all modes. The modes normal and application refer to
# the DECCKM cursor key mode for terminals, and kitty refers to the special kitty
# extended keyboard protocol. Another example, that outputs a word and then moves the cursor
# to the start of the line (same as pressing the Home key):
# send_text normal ctrl+alt+a Word\x1b[H
# send_text application ctrl+alt+a Word\x1bOH


#
# OS specific tweaks
#
macos_option_as_alt yes
